/*
 * Copyright 2008-2010 Gephi
 * Authors : Daniel Bocian
 * Website : http://www.gephi.org
 * 
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.wat.dbocian.et.plugin.ui.panels;

import org.netbeans.validation.api.Problems;
import org.netbeans.validation.api.Validator;
import org.netbeans.validation.api.builtin.Validators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.netbeans.validation.api.ui.ValidationPanel;

/**
 * @author Daniel
 * 
 */
public class KleinbergPanel extends javax.swing.JPanel {

    /**
     * Creates new form KleinbergPanel
     */
    public KleinbergPanel() {
        initComponents();
    }

    public static ValidationPanel createValidationPanel(KleinbergPanel innerPanel) {
        ValidationPanel validationPanel = new ValidationPanel();
        if (innerPanel == null) {
            innerPanel = new KleinbergPanel();
        }
        validationPanel.setInnerComponent(innerPanel);

        ValidationGroup group = validationPanel.getValidationGroup();

        group.add(innerPanel.nField, Validators.REQUIRE_NON_EMPTY_STRING,
                new nValidator(innerPanel));
        group.add(innerPanel.pField, Validators.REQUIRE_NON_EMPTY_STRING,
                new pValidator(innerPanel));
        group.add(innerPanel.qField, Validators.REQUIRE_NON_EMPTY_STRING,
                new qValidator(innerPanel));
        group.add(innerPanel.rField, Validators.REQUIRE_NON_EMPTY_STRING,
                new rValidator(innerPanel));
        group.add(innerPanel.SField, Validators.REQUIRE_NON_NEGATIVE_NUMBER);

        return validationPanel;
    }
    
    public void showFields() {
        SField.setVisible(localBox.isSelected());
        SLabel.setVisible(localBox.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nLabel = new javax.swing.JLabel();
        nField = new javax.swing.JTextField();
        pLabel = new javax.swing.JLabel();
        pField = new javax.swing.JTextField();
        qLabel = new javax.swing.JLabel();
        qField = new javax.swing.JTextField();
        rLabel = new javax.swing.JLabel();
        rField = new javax.swing.JTextField();
        toursLabel = new javax.swing.JLabel();
        toursBox = new javax.swing.JCheckBox();
        localLabel = new javax.swing.JLabel();
        localBox = new javax.swing.JCheckBox();
        SLabel = new javax.swing.JLabel();
        SField = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(250, 200));

        nLabel.setLabelFor(nField);
        nLabel.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.nLabel.text")); // NOI18N

        nField.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.nField.text")); // NOI18N
        nField.setPreferredSize(new java.awt.Dimension(100, 20));

        pLabel.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.pLabel.text")); // NOI18N

        pField.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.pField.text")); // NOI18N

        qLabel.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.qLabel.text")); // NOI18N

        qField.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.qField.text")); // NOI18N

        rLabel.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.rLabel.text")); // NOI18N

        rField.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.rField.text")); // NOI18N

        toursLabel.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.toursLabel.text")); // NOI18N

        localLabel.setLabelFor(localBox);
        localLabel.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.localLabel.text")); // NOI18N

        localBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localBoxActionPerformed(evt);
            }
        });

        SLabel.setLabelFor(SField);
        SLabel.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.SLabel.text")); // NOI18N

        SField.setText(org.openide.util.NbBundle.getMessage(KleinbergPanel.class, "KleinbergPanel.SField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nLabel)
                    .addComponent(pLabel)
                    .addComponent(qLabel)
                    .addComponent(rLabel)
                    .addComponent(toursLabel)
                    .addComponent(localLabel)
                    .addComponent(SLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toursBox)
                    .addComponent(rField)
                    .addComponent(pField)
                    .addComponent(qField)
                    .addComponent(localBox)
                    .addComponent(SField)
                    .addComponent(nField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nLabel)
                    .addComponent(nField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pLabel)
                    .addComponent(pField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qLabel)
                    .addComponent(qField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toursLabel)
                    .addComponent(toursBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localLabel)
                    .addComponent(localBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SLabel)
                    .addComponent(SField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void localBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localBoxActionPerformed
        showFields();
    }//GEN-LAST:event_localBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField SField;
    private javax.swing.JLabel SLabel;
    public javax.swing.JCheckBox localBox;
    private javax.swing.JLabel localLabel;
    public javax.swing.JTextField nField;
    private javax.swing.JLabel nLabel;
    public javax.swing.JTextField pField;
    private javax.swing.JLabel pLabel;
    public javax.swing.JTextField qField;
    private javax.swing.JLabel qLabel;
    public javax.swing.JTextField rField;
    private javax.swing.JLabel rLabel;
    public javax.swing.JCheckBox toursBox;
    private javax.swing.JLabel toursLabel;
    // End of variables declaration//GEN-END:variables

    private static class nValidator implements Validator<String> {

        private final KleinbergPanel innerPanel;

        public nValidator(KleinbergPanel innerPanel) {
            this.innerPanel = innerPanel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Integer n = Integer.parseInt(innerPanel.nField.getText());
                result = n >= 2;
            } catch (NumberFormatException e) {
            }
            if (!result) {
                String message = "<html>n &#8805; 2</html>";
                problems.add(message);
            }

            return result;
        }
    }

    private static class pValidator implements Validator<String> {

        private final KleinbergPanel innerPanel;

        public pValidator(KleinbergPanel innerPanel) {
            this.innerPanel = innerPanel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Integer n = Integer.parseInt(innerPanel.nField.getText());
                Integer p = Integer.parseInt(innerPanel.pField.getText());
                result = p >= 1 && p <= 2 * n - 2;
            } catch (NumberFormatException e) {
            }
            if (!result) {
                String message = "<html>1 &le; p &le; 2n - 2</html>";
                problems.add(message);
            }

            return result;
        }
    }

    private static class qValidator implements Validator<String> {

        private final KleinbergPanel innerPanel;

        public qValidator(KleinbergPanel innerPanel) {
            this.innerPanel = innerPanel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Integer n = Integer.parseInt(innerPanel.nField.getText());
                Integer p = Integer.parseInt(innerPanel.pField.getText());
                Integer q = Integer.parseInt(innerPanel.qField.getText());
                if (p < n) {
                    result = q >= 0 && q <= n * n - p * (p + 3) / 2 - 1;
                } else {
                    result = q >= 0 && q <= (2 * n - p - 3) * (2 * n - p) / 2 + 1;
                }
            } catch (NumberFormatException e) {
            }
            if (!result) {
                String message
                        = "<html>q &ge; 0<br>"
                        + "q &le; n^2 - p * (p + 3) / 2 - 1 for p &lt; n<br>"
                        + "q &le; (2n - p - 3) * (2n - p) / 2 + 1 for p &ge; n<br></html>";
                problems.add(message);
            }

            return result;
        }
    }

    private static class rValidator implements Validator<String> {

        private final KleinbergPanel innerPanel;

            public rValidator(KleinbergPanel innerPanel) {
            this.innerPanel = innerPanel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Double r = Double.parseDouble(innerPanel.rField.getText());
                result = r >= 0;
            } catch (NumberFormatException e) {
            }
            if (!result) {
                String message = "<html>r &ge; 0</html>";
                problems.add(message);
            }

            return result;
        }
    }
}
