/*
 * Copyright 2008-2010 Gephi
 * Authors : Daniel Bocian
 * Website : http://www.gephi.org
 * 
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.wat.dbocian.et.plugin.ui.panels;

import org.gephi.lib.validation.BetweenZeroAndOneValidator;
import org.netbeans.validation.api.Problems;
import org.netbeans.validation.api.Validator;
import org.netbeans.validation.api.builtin.Validators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.netbeans.validation.api.ui.ValidationPanel;
import pl.edu.wat.dbocian.et.plugin.ui.validators.RealNumberValidator;

/**
 * @author Daniel
 *
 */
public class WattsStrogatzBetaPanel extends javax.swing.JPanel {

    /**
     * Creates new form WattsStrogatzBetaPanel
     */
    public WattsStrogatzBetaPanel() {
        initComponents();
    }

    public static ValidationPanel createValidationPanel(WattsStrogatzBetaPanel innerPanel) {
        ValidationPanel validationPanel = new ValidationPanel();
        if (innerPanel == null) {
            innerPanel = new WattsStrogatzBetaPanel();
        }
        validationPanel.setInnerComponent(innerPanel);

        ValidationGroup group = validationPanel.getValidationGroup();

        group.add(innerPanel.NField, Validators.REQUIRE_NON_EMPTY_STRING,
                new NValidator(innerPanel));
        group.add(innerPanel.KField, Validators.REQUIRE_NON_EMPTY_STRING,
                new KValidator(innerPanel));
        group.add(innerPanel.betaField, Validators.REQUIRE_NON_EMPTY_STRING,
                new BetweenZeroAndOneValidator());
        group.add(innerPanel.rField, Validators.REQUIRE_NON_EMPTY_STRING, 
                new RealNumberValidator(innerPanel.rLabel.getText()));

        return validationPanel;
    }    
    
    public void showFields() {
        rField.setVisible(dependentBox.isSelected());
        rLabel.setVisible(dependentBox.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NLabel = new javax.swing.JLabel();
        NField = new javax.swing.JTextField();
        KLabel = new javax.swing.JLabel();
        KField = new javax.swing.JTextField();
        betaLabel = new javax.swing.JLabel();
        betaField = new javax.swing.JTextField();
        dependentLabel = new javax.swing.JLabel();
        dependentBox = new javax.swing.JCheckBox();
        rLabel = new javax.swing.JLabel();
        rField = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(250, 150));

        NLabel.setLabelFor(NField);
        NLabel.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.NLabel.text")); // NOI18N

        NField.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.NField.text")); // NOI18N
        NField.setPreferredSize(new java.awt.Dimension(100, 20));

        KLabel.setLabelFor(KField);
        KLabel.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.KLabel.text")); // NOI18N

        KField.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.KField.text")); // NOI18N

        betaLabel.setLabelFor(betaField);
        betaLabel.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.betaLabel.text")); // NOI18N

        betaField.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.betaField.text")); // NOI18N

        dependentLabel.setLabelFor(dependentBox);
        dependentLabel.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.dependentLabel.text")); // NOI18N

        dependentBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependentBoxActionPerformed(evt);
            }
        });

        rLabel.setLabelFor(rField);
        rLabel.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.rLabel.text")); // NOI18N

        rField.setText(org.openide.util.NbBundle.getMessage(WattsStrogatzBetaPanel.class, "WattsStrogatzBetaPanel.rField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NLabel)
                    .addComponent(KLabel)
                    .addComponent(betaLabel)
                    .addComponent(dependentLabel)
                    .addComponent(rLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dependentBox)
                    .addComponent(NField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(KField)
                    .addComponent(betaField)
                    .addComponent(rField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NLabel)
                    .addComponent(NField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KLabel)
                    .addComponent(KField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(betaLabel)
                    .addComponent(betaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dependentBox)
                    .addComponent(dependentLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rLabel)
                    .addComponent(rField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dependentBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependentBoxActionPerformed
        showFields();
    }//GEN-LAST:event_dependentBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField KField;
    private javax.swing.JLabel KLabel;
    public javax.swing.JTextField NField;
    private javax.swing.JLabel NLabel;
    public javax.swing.JTextField betaField;
    private javax.swing.JLabel betaLabel;
    public javax.swing.JCheckBox dependentBox;
    private javax.swing.JLabel dependentLabel;
    public javax.swing.JTextField rField;
    private javax.swing.JLabel rLabel;
    // End of variables declaration//GEN-END:variables

    private static class NValidator implements Validator<String> {

        private final WattsStrogatzBetaPanel innerPanel;

        public NValidator(WattsStrogatzBetaPanel innerPanel) {
            this.innerPanel = innerPanel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Integer N = Integer.parseInt(innerPanel.NField.getText());
                Integer K = Integer.parseInt(innerPanel.KField.getText());
                result = N > K;
            } catch (NumberFormatException e) {
            }
            if (!result) {
                String message = "<html>N &gt; K</html>";
                problems.add(message);
            }

            return result;
        }
    }

    private static class KValidator implements Validator<String> {

        private final WattsStrogatzBetaPanel innerPanel;

        public KValidator(WattsStrogatzBetaPanel innerPanel) {
            this.innerPanel = innerPanel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Integer N = Integer.parseInt(innerPanel.NField.getText());
                Integer K = Integer.parseInt(innerPanel.KField.getText());
                Double lnN = Math.log(N);
                result = K >= lnN && lnN >= 1 && K % 2 == 0;
            } catch (NumberFormatException e) {
            }
            if (!result) {
                String message = "<html>K &ge; ln(N) &ge; 1 and K is even</html>";
                problems.add(message);
            }

            return result;
        }
    }
}

