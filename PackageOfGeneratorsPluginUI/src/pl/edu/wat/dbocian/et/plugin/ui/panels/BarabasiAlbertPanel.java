/*
 * Copyright 2008-2010 Gephi
 * Authors : Daniel Bocian
 * Website : http://www.gephi.org
 * 
 * This file is part of Gephi.
 *
 * Gephi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Gephi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Gephi.  If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.wat.dbocian.et.plugin.ui.panels;

import org.gephi.lib.validation.BetweenZeroAndOneValidator;
import org.gephi.lib.validation.PositiveNumberValidator;
import org.netbeans.validation.api.Problems;
import org.netbeans.validation.api.Validator;
import org.netbeans.validation.api.builtin.Validators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.netbeans.validation.api.ui.ValidationPanel;

/**
 * @author Daniel Bocian
 * 
 */
public class BarabasiAlbertPanel extends javax.swing.JPanel {

    /**
     * Creates new form BarabasiAlbertPanel
     */
    public BarabasiAlbertPanel() {
        initComponents();
        showDataFields();
    }

    public static ValidationPanel createValidationPanel(BarabasiAlbertPanel innerPanel) {
        ValidationPanel valPanel = new ValidationPanel();
        if (innerPanel == null) {
            innerPanel = new BarabasiAlbertPanel();
        }
        valPanel.setInnerComponent(innerPanel);

        ValidationGroup group = valPanel.getValidationGroup();

        group.add(innerPanel.NField, Validators.REQUIRE_NON_EMPTY_STRING, new PositiveNumberValidator());
        group.add(innerPanel.M0Field, Validators.REQUIRE_NON_EMPTY_STRING, new PositiveNumberValidator());
        group.add(innerPanel.M0Field, Validators.REQUIRE_NON_EMPTY_STRING, new M0Validator(innerPanel));
        group.add(innerPanel.MField, Validators.REQUIRE_NON_EMPTY_STRING, new PositiveNumberValidator());
        group.add(innerPanel.MField, Validators.REQUIRE_NON_EMPTY_STRING, new MValidator(innerPanel));
        group.add(innerPanel.startAge, Validators.REQUIRE_NON_NEGATIVE_NUMBER, new BetweenZeroAndOneValidator());
        group.add(innerPanel.growingInterval, Validators.REQUIRE_NON_NEGATIVE_NUMBER, new BetweenZeroAndOneValidator());
        group.add(innerPanel.ageingInterval, Validators.REQUIRE_NON_NEGATIVE_NUMBER, new GettingOldParameterValidator(innerPanel));

        return valPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ageingTypeGroup = new javax.swing.ButtonGroup();
        NField = new javax.swing.JTextField();
        M0Field = new javax.swing.JTextField();
        MField = new javax.swing.JTextField();
        NLabel = new javax.swing.JLabel();
        M0Label = new javax.swing.JLabel();
        MLabel = new javax.swing.JLabel();
        LineAgeing = new javax.swing.JRadioButton();
        ageingLabel = new javax.swing.JLabel();
        ExponentialAgeing = new javax.swing.JRadioButton();
        HomographicAgeing = new javax.swing.JRadioButton();
        randomiseLabel = new javax.swing.JLabel();
        randomiseCheckBox = new javax.swing.JCheckBox();
        startAgeLabel = new javax.swing.JLabel();
        startAge = new javax.swing.JTextField();
        growingIntervalLabel = new javax.swing.JLabel();
        growingInterval = new javax.swing.JTextField();
        ageingIntervalLabel = new javax.swing.JLabel();
        ageingInterval = new javax.swing.JTextField();
        NoneAgeing = new javax.swing.JRadioButton();

        NField.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.NField.text")); // NOI18N
        NField.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.NLabel.toolTipText")); // NOI18N

        M0Field.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.M0Field.text")); // NOI18N
        M0Field.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.M0Field.toolTipText")); // NOI18N

        MField.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.MField.text")); // NOI18N
        MField.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.MField.toolTipText")); // NOI18N

        NLabel.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.NLabel.text")); // NOI18N
        NLabel.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.NLabel.toolTipText")); // NOI18N

        M0Label.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.M0Label.text")); // NOI18N
        M0Label.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.M0Field.toolTipText")); // NOI18N

        MLabel.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.MLabel.text")); // NOI18N
        MLabel.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.MLabel.toolTipText")); // NOI18N

        ageingTypeGroup.add(LineAgeing);
        LineAgeing.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.LineAgeing.text")); // NOI18N
        LineAgeing.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.LineAgeing.toolTipText")); // NOI18N
        LineAgeing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineAgeingActionPerformed(evt);
            }
        });

        ageingLabel.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.ageingLabel.text")); // NOI18N

        ageingTypeGroup.add(ExponentialAgeing);
        ExponentialAgeing.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.ExponentialAgeing.text")); // NOI18N
        ExponentialAgeing.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.ExponentialAgeing.toolTipText")); // NOI18N
        ExponentialAgeing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExponentialAgeingActionPerformed(evt);
            }
        });

        ageingTypeGroup.add(HomographicAgeing);
        HomographicAgeing.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.HomographicAgeing.text")); // NOI18N
        HomographicAgeing.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.HomographicAgeing.toolTipText")); // NOI18N
        HomographicAgeing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomographicAgeingActionPerformed(evt);
            }
        });

        randomiseLabel.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.randomiseLabel.text")); // NOI18N

        randomiseCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.randomiseCheckBox.toolTipText")); // NOI18N
        randomiseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomiseCheckBoxActionPerformed(evt);
            }
        });

        startAgeLabel.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.startAgeLabel.text")); // NOI18N

        startAge.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.startAge.text")); // NOI18N

        growingIntervalLabel.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.growingIntervalLabel.text")); // NOI18N

        growingInterval.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.growingInterval.text")); // NOI18N

        ageingIntervalLabel.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.ageingIntervalLabel.text")); // NOI18N

        ageingInterval.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.ageingInterval.text")); // NOI18N

        ageingTypeGroup.add(NoneAgeing);
        NoneAgeing.setSelected(true);
        NoneAgeing.setText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.NoneAgeing.text")); // NOI18N
        NoneAgeing.setToolTipText(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.NoneAgeing.toolTipText")); // NOI18N
        NoneAgeing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoneAgeingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(randomiseLabel)
                                .addComponent(startAgeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(growingIntervalLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(ageingIntervalLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(ageingLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MLabel)
                            .addComponent(M0Label)
                            .addComponent(NLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(HomographicAgeing)
                        .addComponent(NoneAgeing)
                        .addComponent(LineAgeing)
                        .addComponent(ExponentialAgeing)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(NField)
                                .addComponent(MField)
                                .addComponent(M0Field, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(ageingInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(growingInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startAge, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomiseCheckBox))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(M0Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(M0Label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NoneAgeing)
                    .addComponent(ageingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LineAgeing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ExponentialAgeing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(HomographicAgeing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(randomiseCheckBox)
                    .addComponent(randomiseLabel))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startAgeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(growingInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(growingIntervalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageingInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageingIntervalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(118, Short.MAX_VALUE))
        );

        NField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.NField.AccessibleContext.accessibleName")); // NOI18N
        M0Field.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.M0Field.AccessibleContext.accessibleName")); // NOI18N
        MField.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(BarabasiAlbertPanel.class, "BarabasiAlbertPanel.MField.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void LineAgeingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineAgeingActionPerformed
        showDataFields();
    }//GEN-LAST:event_LineAgeingActionPerformed

    private void randomiseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomiseCheckBoxActionPerformed
        showDataFields();
    }//GEN-LAST:event_randomiseCheckBoxActionPerformed

    private void ExponentialAgeingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExponentialAgeingActionPerformed
        showDataFields();
    }//GEN-LAST:event_ExponentialAgeingActionPerformed

    private void HomographicAgeingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomographicAgeingActionPerformed
        showDataFields();
    }//GEN-LAST:event_HomographicAgeingActionPerformed

    private void NoneAgeingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoneAgeingActionPerformed
        showDataFields();
    }//GEN-LAST:event_NoneAgeingActionPerformed

    public void showDataFields() {
        if (NoneAgeing.isSelected()) {
            randomiseCheckBox.setVisible(false);
            randomiseLabel.setVisible(false);
            startAgeLabel.setVisible(false);
            startAge.setVisible(false);
            growingIntervalLabel.setVisible(false);
            growingInterval.setVisible(false);
            ageingIntervalLabel.setVisible(false);
            ageingInterval.setVisible(false);
        } else {
            randomiseCheckBox.setVisible(true);
            randomiseLabel.setVisible(true);
            if (randomiseCheckBox.isSelected()) {
                startAgeLabel.setVisible(false);
                startAge.setVisible(false);
                growingIntervalLabel.setVisible(false);
                growingInterval.setVisible(false);
                ageingIntervalLabel.setVisible(false);
                ageingInterval.setVisible(false);
            } else {
                int type = 1;
                if (LineAgeing.isSelected()) {
                    type = 1;
                } else if (ExponentialAgeing.isSelected()) {
                    type = 2;
                } else if (HomographicAgeing.isSelected()) {
                    type = 3;
                }

                startAgeLabel.setVisible(true);
                startAge.setVisible(true);
                if (type < 3) {
                    ageingIntervalLabel.setVisible(true);
                    ageingInterval.setVisible(true);
                    if (type < 2) {
                        growingIntervalLabel.setVisible(true);
                        growingInterval.setVisible(true);
                    } else {
                        growingIntervalLabel.setVisible(false);
                        growingInterval.setVisible(false);
                    }
                } else {
                    growingIntervalLabel.setVisible(false);
                    growingInterval.setVisible(false);
                    ageingIntervalLabel.setVisible(false);
                    ageingInterval.setVisible(false);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JRadioButton ExponentialAgeing;
    public javax.swing.JRadioButton HomographicAgeing;
    public javax.swing.JRadioButton LineAgeing;
    public javax.swing.JTextField M0Field;
    private javax.swing.JLabel M0Label;
    public javax.swing.JTextField MField;
    private javax.swing.JLabel MLabel;
    public javax.swing.JTextField NField;
    private javax.swing.JLabel NLabel;
    public javax.swing.JRadioButton NoneAgeing;
    public javax.swing.JTextField ageingInterval;
    private javax.swing.JLabel ageingIntervalLabel;
    private javax.swing.JLabel ageingLabel;
    protected javax.swing.ButtonGroup ageingTypeGroup;
    public javax.swing.JTextField growingInterval;
    private javax.swing.JLabel growingIntervalLabel;
    public javax.swing.JCheckBox randomiseCheckBox;
    private javax.swing.JLabel randomiseLabel;
    public javax.swing.JTextField startAge;
    private javax.swing.JLabel startAgeLabel;
    // End of variables declaration//GEN-END:variables

    private static class MValidator implements Validator<String> {

        BarabasiAlbertPanel panel;

        public MValidator(BarabasiAlbertPanel panel) {
            this.panel = panel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Integer m0 = Integer.parseInt(panel.M0Field.getText());
                Integer M = Integer.parseInt(panel.MField.getText());
                result = M <= m0;
            } catch (Exception e) {
            }
            if (!result) {
                //String message = "M musi być mniejsze lub równe M0";
                String message = "M must be lower or equal M0";
                problems.add(message);
            }

            return result;
        }
    }

    private static class M0Validator implements Validator<String> {

        BarabasiAlbertPanel panel;

        public M0Validator(BarabasiAlbertPanel panel) {
            this.panel = panel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;

            try {
                Integer N = Integer.parseInt(panel.NField.getText());
                Integer M0 = Integer.parseInt(panel.M0Field.getText());
                result = M0 <= N;
            } catch (Exception e) {
            }
            if (!result) {
                //String message = "M0 musi być mniejsze lub równe N";
                String message = "M0 must be lower or equal N";
                problems.add(message);
            }

            return result;
        }
    }

    private static class GettingOldParameterValidator implements Validator<String> {

        BarabasiAlbertPanel panel;

        public GettingOldParameterValidator(BarabasiAlbertPanel panel) {
            this.panel = panel;
        }

        @Override
        public boolean validate(Problems problems, String compName, String model) {
            boolean result = false;
            //String message = "Interwał starzenia musi być z przedziału [0.0, 1.0];
            String message = "Getting old interval must be in range [0.0, 1.0]";
            try {
                Double s = Double.parseDouble(panel.ageingInterval.getText());
                if (panel.ExponentialAgeing.isSelected()) {
                    result = s > 0.0;
                    //message = "Interwał starzenia musi być większy niż 0.0";
                    message = "Getting old interval must be grater than 0.0";
                } else {
                    result = s <= 1.0;
                    result &= s >= 0.0;
                }
            } catch (Exception e) {
                //message = "Interwał starzenia musi być liczbą";
                message = "Getting old interval must be a number";
                e.printStackTrace();
            }

            if (!result) {
                problems.add(message);
            }
            return result;
        }

    }
}
